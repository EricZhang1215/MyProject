package com.dxc.converter.service.impl;

import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.web.client.RestTemplate;

import com.dxc.converter.component.PremiumCalculateComp;
import com.dxc.converter.constant.VPMSConstant;
import com.dxc.converter.enums.VPMSExceptionEnum;
import com.dxc.converter.exception.VPMSAPIException;
import com.dxc.converter.log.annotation.OperationLogDetail;
import com.dxc.converter.log.enums.OperationType;
import com.dxc.converter.log.enums.OperationUnit;
import com.dxc.converter.model.ERROR;
import com.dxc.converter.model.ObjectFactory;
import com.dxc.converter.model.PRMCALIREC;
import com.dxc.converter.model.PRMCALOREC;
import com.dxc.converter.model.REASON;
import com.dxc.converter.service.PRMService;
import com.dxc.utils.HttpUtil;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PRMService", targetNamespace = "http://service.converter.prm.dxc.com", endpointInterface = "com.dxc.converter.service.PRMService")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public class PRMServiceImpl implements PRMService {

	Logger logger = LoggerFactory.getLogger(PRMServiceImpl.class);
	
	@Autowired
	private PremiumCalculateComp premiumCalculateComp;
	
	@OperationLogDetail(detail = "保费计算接口", level = 1, operationUnit = OperationUnit.SOAPAPI, operationType = OperationType.CALCULATE)
	@Override
	public PRMCALOREC convertPRM(PRMCALIREC prmcalirec) {

		try {
			// premium and risk amount
			String[][] req_premiumRiskAmount = premiumCalculateComp.requestReady(prmcalirec, VPMSConstant.PRMCAL_premiumRiskAmount);
			String[][] res_premiumRiskAmount = premiumCalculateComp.postCalculateRestAPI(req_premiumRiskAmount);
			// cash value
			String[][] res_cashvalue = null;
			if (prmcalirec.getPREMIUM().getZNBAKFLD().equalsIgnoreCase("Y")) {
				String[][] req_cashvalue = premiumCalculateComp.requestReady(prmcalirec, VPMSConstant.PRMCAL_quotedCashvalue);	
				res_cashvalue = premiumCalculateComp.postCalculateRestAPI(req_cashvalue);			
			}
			PRMCALOREC prmcalorec = premiumCalculateComp.responseMerge(prmcalirec, res_premiumRiskAmount, res_cashvalue);
			return prmcalorec;
		} catch (VPMSAPIException ve) {
			logger.error(ve.getStackTrace().toString());
			return generateErrorResponse(ve.getErrorCode(), ve.getMessage());
		} catch (Exception e) {
			logger.error(e.getStackTrace().toString());
			return generateErrorResponse(VPMSExceptionEnum.SYSTEM_ERROR.getErrorCode(),
					VPMSExceptionEnum.SYSTEM_ERROR.getErrorMsg());
		}
	}

	private PRMCALOREC generateErrorResponse(String errorCode, String errorDesc) {

		ObjectFactory objectFactory = new ObjectFactory();
		PRMCALOREC prmcalorec = objectFactory.createPRMCALOREC();

		ERROR error = objectFactory.createERROR();
		error.setSTATUS("1");

		REASON reason = objectFactory.createREASON();
		reason.setERRORDESC(errorDesc);
		reason.setERROREROR(errorCode);
		error.getREASON().add(reason);

		prmcalorec.setERROR(error);
		return prmcalorec;
	}


}
